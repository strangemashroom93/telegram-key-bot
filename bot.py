import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime

TOKEN = "7856922433:AAElQHxJiNJarqrDTABRIIseRgBYBl5KmtM"
IMAGE_PATH = "/Users/oleggojdenko/Documents/–∫–ª—é—á–∏/key.jpg"  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class KeyStates(StatesGroup):
    take_key_time = State()
    return_key_time = State()

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
subscribed_users = set()

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
key_schedule = {}

async def send_key_menu(chat_id):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîë –°–∫–∏–Ω—å—Ç–µ –∫–ª—é—á", callback_data="get_key")],
        [InlineKeyboardButton(text="üìÖ –ó–∞–±—Ä–∞—Ç—å –∫–ª—é—á", callback_data="take_key")],
        [InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–ª—é—á–∞", callback_data="schedule_key")]
    ])
    
    try:
        photo = FSInputFile(IMAGE_PATH)
        await bot.send_photo(chat_id, photo, caption="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await bot.send_message(chat_id, "üîë –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.message(F.text == "/start")
async def start(message: types.Message):
    subscribed_users.add(message.chat.id)
    await send_key_menu(message.chat.id)

@dp.callback_query()
async def handle_callbacks(callback_query: types.CallbackQuery, state: FSMContext):
    global key_schedule
    now = datetime.now()

    if callback_query.data == "get_key":
        for user_id in subscribed_users:
            try:
                await bot.send_message(user_id, "üîë –ö–ª—é—á –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    elif callback_query.data == "take_key":
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤–∑—è—Ç–∏—è –∫–ª—é—á–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12.03.2025 14:00):")
        await state.set_state(KeyStates.take_key_time)

    elif callback_query.data == "schedule_key":
        if key_schedule:
            schedule_message = "üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–ª—é—á–∞:\n"
            for user_id, data in key_schedule.items():
                take_time = data["take_time"].strftime("%d.%m.%Y %H:%M")
                return_time = data["return_time"].strftime("%d.%m.%Y %H:%M") if data["return_time"] else "–ù–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω"
                schedule_message += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –ó–∞–±–æ—Ä - {take_time}, –í–æ–∑–≤—Ä–∞—Ç - {return_time}\n"
            await callback_query.message.answer(schedule_message)
        else:
            await callback_query.message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ. –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
    
    await callback_query.answer()

@dp.message(KeyStates.take_key_time)
async def handle_take_key_time(message: types.Message, state: FSMContext):
    user_id = message.chat.id
    try:
        take_time = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        key_schedule[user_id] = {"take_time": take_time, "return_time": None}
        await message.answer(f"–í—ã –∑–∞–±—Ä–∞–ª–∏ –∫–ª—é—á –≤ {take_time.strftime('%d.%m.%Y %H:%M')}. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—Ç–∞:")
        await state.set_state(KeyStates.return_key_time)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú.")

@dp.message(KeyStates.return_key_time)
async def handle_return_key_time(message: types.Message, state: FSMContext):
    user_id = message.chat.id
    try:
        return_time = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        if user_id in key_schedule:
            key_schedule[user_id]["return_time"] = return_time
            
            for other_user_id, data in key_schedule.items():
                if other_user_id != user_id and data["return_time"] and data["take_time"] < return_time:
                    if data["return_time"] >= return_time:
                        key_schedule[other_user_id] = {"take_time": data["take_time"], "return_time": return_time}
                        await bot.send_message(other_user_id, "‚ùó –í–∞—à–∞ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ø–æ—Ç–æ–º—É —á—Ç–æ –µ–≥–æ –≤—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –±—ã–ª–æ –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–º.")
            
            await message.answer(f"–í—ã –≤–µ—Ä–Ω—É–ª–∏ –∫–ª—é—á –≤ {return_time.strftime('%d.%m.%Y %H:%M')}. –ó–∞–ø–∏—Å—å —É–¥–∞–ª–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞—Å—Ç—É–ø–∏—Ç.")
            await state.clear()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            while datetime.now() < return_time:
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            if user_id in key_schedule and key_schedule[user_id]["return_time"] == return_time:
                del key_schedule[user_id]
                await bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ –∫–ª—é—á–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –≤—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞—Å—Ç—É–ø–∏–ª–æ.")
        else:
            await message.answer("–û—à–∏–±–∫–∞! –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –∫–ª—é—á.")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú.")

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
